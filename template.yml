AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'pipeline-builder-sample2'

Parameters:
  ProjectId:
   Type: String
   Description: Automatically generated ProjectId based on repository and branch
  Stage:
   Type: String
   Description: Deployment stage. Either TEST or FINAL
  Branch:
   Type: String
   Description: The Git branch
  CodeBucket:
   Type: String
   Description: Automatically generated bucket where the code is stored
  InitFunctionName:
   Type: String
   Description: Automatically generated name for the initialization function
  DestroyFunctionName:
   Type:  String
   Description: Automatically generated name for the destroy function 


Resources:
  DatabaseGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties: 
      Description: A friendly description
      Family: aurora-mysql5.7
#      Parameters: 
#        aurora_enable_replica_log_compression: true

  Database:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: aurora-mysql
      DBClusterParameterGroupName: !Ref DatabaseGroup
      MasterUsername: '{{resolve:secretsmanager:MyRDSSecret:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:MyRDSSecret:SecretString:password}}'
    
    
  Init:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.myHandler
      InlineCode: >
        var AWS = require('aws-sdk');
        exports.myHandler = function(event, context) {

            var codepipeline = new AWS.CodePipeline();
                // Retrieve the Job ID from the Lambda action
            var jobId = event["CodePipeline.job"].id;

            var putJobSuccess = function(message) {
                var params = {
                    jobId: jobId
                };
                codepipeline.putJobSuccessResult(params, function(err, data) {
                    if(err) {
                        context.fail(err);
                    } else {
                        context.succeed(message);
                    }
                });
            };
            putJobSuccess('Lambda function success');
        };

      FunctionName:  !Ref InitFunctionName
      Runtime: nodejs8.10
      Policies:
        Version: '2012-10-17'
        Statement:
          - Action:
              - lambda:InvokeFunction
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
            Effect: Allow
            Resource: "*"
          - Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: "arn:aws:iam::*:role/aws-service-role/*"
      MemorySize: 256
      Timeout: 900


  Destroy:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.myHandler
      InlineCode: >
        var AWS = require('aws-sdk');
        exports.myHandler = function(event, context) {

            var codepipeline = new AWS.CodePipeline();
                // Retrieve the Job ID from the Lambda action
            var jobId = event["CodePipeline.job"].id;

            var putJobSuccess = function(message) {
                var params = {
                    jobId: jobId
                };
                codepipeline.putJobSuccessResult(params, function(err, data) {
                    if(err) {
                        context.fail(err);
                    } else {
                        context.succeed(message);
                    }
                });
            };
            putJobSuccess('Lambda function success');
        };

      FunctionName:  !Ref DestroyFunctionName
      Runtime: nodejs8.10
      Policies:
        Version: '2012-10-17'
        Statement:
          - Action:
              - lambda:InvokeFunction
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
            Effect: Allow
            Resource: "*"
          - Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: "arn:aws:iam::*:role/aws-service-role/*"
      MemorySize: 256
      Timeout: 900

    
    